(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var slideIndex = 0;
carousel();

function carousel() {
  var i;
  var x = document.getElementsByClassName("mySlides");

  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }

  slideIndex++;

  if (slideIndex > x.length) {
    slideIndex = 1;
  }

  x[slideIndex - 1].style.display = "block";
  setTimeout(carousel, 10000); // Change image every 2 seconds
}

showSlides(slideIndex);

function showSlides(n) {
  var i;
  var slides = document.getElementsByClassName("mySlides");
  var dots = document.getElementsByClassName("dot");

  if (n > slides.length) {
    slideIndex = 1;
  }

  if (n < 1) {
    slideIndex = slides.length;
  }

  for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";
  }

  for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" active", "");
  }

  slides[slideIndex - 1].style.display = "block";
  dots[slideIndex - 1].className += " active";
}

Array.from(document.querySelectorAll('a.next')).forEach(function (cls) {
  cls.addEventListener('click', function () {
    showSlides(slideIndex += 1);
  });
});
Array.from(document.querySelectorAll('a.prev')).forEach(function (cls) {
  cls.addEventListener('click', function () {
    showSlides(slideIndex += -1);
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvY2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksVUFBVSxHQUFHLENBQWpCO0FBRUEsUUFBUTs7QUFFUixTQUFTLFFBQVQsR0FBb0I7QUFDaEIsTUFBSSxDQUFKO0FBQ0EsTUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLHNCQUFULENBQWdDLFVBQWhDLENBQVI7O0FBQ0EsT0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBbEIsRUFBMEIsQ0FBQyxFQUEzQixFQUErQjtBQUMzQixJQUFBLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixNQUFyQjtBQUNIOztBQUNELEVBQUEsVUFBVTs7QUFDVixNQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsTUFBbkIsRUFBMkI7QUFDdkIsSUFBQSxVQUFVLEdBQUcsQ0FBYjtBQUNIOztBQUVELEVBQUEsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFkLENBQUQsQ0FBa0IsS0FBbEIsQ0FBd0IsT0FBeEIsR0FBa0MsT0FBbEM7QUFDQSxFQUFBLFVBQVUsQ0FBQyxRQUFELEVBQVcsS0FBWCxDQUFWLENBWmdCLENBWWE7QUFDaEM7O0FBRUQsVUFBVSxDQUFDLFVBQUQsQ0FBVjs7QUFFQSxTQUFTLFVBQVQsQ0FBb0IsQ0FBcEIsRUFBdUI7QUFDbkIsTUFBSSxDQUFKO0FBQ0EsTUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLHNCQUFULENBQWdDLFVBQWhDLENBQWI7QUFDQSxNQUFJLElBQUksR0FBRyxRQUFRLENBQUMsc0JBQVQsQ0FBZ0MsS0FBaEMsQ0FBWDs7QUFDQSxNQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBZixFQUF1QjtBQUNuQixJQUFBLFVBQVUsR0FBRyxDQUFiO0FBQ0g7O0FBQ0QsTUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXO0FBQ1AsSUFBQSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQXBCO0FBQ0g7O0FBQ0QsT0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBdkIsRUFBK0IsQ0FBQyxFQUFoQyxFQUFvQztBQUNoQyxJQUFBLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVSxLQUFWLENBQWdCLE9BQWhCLEdBQTBCLE1BQTFCO0FBQ0g7O0FBQ0QsT0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBckIsRUFBNkIsQ0FBQyxFQUE5QixFQUFrQztBQUM5QixJQUFBLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUSxTQUFSLEdBQW9CLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUSxTQUFSLENBQWtCLE9BQWxCLENBQTBCLFNBQTFCLEVBQXFDLEVBQXJDLENBQXBCO0FBQ0g7O0FBQ0QsRUFBQSxNQUFNLENBQUMsVUFBVSxHQUFHLENBQWQsQ0FBTixDQUF1QixLQUF2QixDQUE2QixPQUE3QixHQUF1QyxPQUF2QztBQUNBLEVBQUEsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFkLENBQUosQ0FBcUIsU0FBckIsSUFBa0MsU0FBbEM7QUFDSDs7QUFFRCxLQUFLLENBQUMsSUFBTixDQUFXLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixRQUExQixDQUFYLEVBQWdELE9BQWhELENBQXdELFVBQUEsR0FBRyxFQUFJO0FBQzNELEVBQUEsR0FBRyxDQUFDLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFlBQVk7QUFDdEMsSUFBQSxVQUFVLENBQUMsVUFBVSxJQUFJLENBQWYsQ0FBVjtBQUNILEdBRkQ7QUFHSCxDQUpEO0FBTUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsUUFBMUIsQ0FBWCxFQUFnRCxPQUFoRCxDQUF3RCxVQUFBLEdBQUcsRUFBSTtBQUMzRCxFQUFBLEdBQUcsQ0FBQyxnQkFBSixDQUFxQixPQUFyQixFQUE4QixZQUFZO0FBQ3RDLElBQUEsVUFBVSxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQWhCLENBQVY7QUFDSCxHQUZEO0FBR0gsQ0FKRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsInZhciBzbGlkZUluZGV4ID0gMDtcclxuXHJcbmNhcm91c2VsKCk7XHJcblxyXG5mdW5jdGlvbiBjYXJvdXNlbCgpIHtcclxuICAgIHZhciBpO1xyXG4gICAgdmFyIHggPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibXlTbGlkZXNcIik7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHhbaV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG4gICAgc2xpZGVJbmRleCsrO1xyXG4gICAgaWYgKHNsaWRlSW5kZXggPiB4Lmxlbmd0aCkge1xyXG4gICAgICAgIHNsaWRlSW5kZXggPSAxXHJcbiAgICB9XHJcblxyXG4gICAgeFtzbGlkZUluZGV4IC0gMV0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIHNldFRpbWVvdXQoY2Fyb3VzZWwsIDEwMDAwKTsgLy8gQ2hhbmdlIGltYWdlIGV2ZXJ5IDIgc2Vjb25kc1xyXG59XHJcblxyXG5zaG93U2xpZGVzKHNsaWRlSW5kZXgpO1xyXG5cclxuZnVuY3Rpb24gc2hvd1NsaWRlcyhuKSB7XHJcbiAgICB2YXIgaTtcclxuICAgIHZhciBzbGlkZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibXlTbGlkZXNcIik7XHJcbiAgICB2YXIgZG90cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkb3RcIik7XHJcbiAgICBpZiAobiA+IHNsaWRlcy5sZW5ndGgpIHtcclxuICAgICAgICBzbGlkZUluZGV4ID0gMVxyXG4gICAgfVxyXG4gICAgaWYgKG4gPCAxKSB7XHJcbiAgICAgICAgc2xpZGVJbmRleCA9IHNsaWRlcy5sZW5ndGhcclxuICAgIH1cclxuICAgIGZvciAoaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzbGlkZXNbaV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG4gICAgZm9yIChpID0gMDsgaSA8IGRvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBkb3RzW2ldLmNsYXNzTmFtZSA9IGRvdHNbaV0uY2xhc3NOYW1lLnJlcGxhY2UoXCIgYWN0aXZlXCIsIFwiXCIpO1xyXG4gICAgfVxyXG4gICAgc2xpZGVzW3NsaWRlSW5kZXggLSAxXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgZG90c1tzbGlkZUluZGV4IC0gMV0uY2xhc3NOYW1lICs9IFwiIGFjdGl2ZVwiO1xyXG59XHJcblxyXG5BcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EubmV4dCcpKS5mb3JFYWNoKGNscyA9PiB7XHJcbiAgICBjbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2hvd1NsaWRlcyhzbGlkZUluZGV4ICs9IDEpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhLnByZXYnKSkuZm9yRWFjaChjbHMgPT4ge1xyXG4gICAgY2xzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNob3dTbGlkZXMoc2xpZGVJbmRleCArPSAtMSk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5cclxuIl19
