(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var slideIndex = 0;
carousel();

function carousel() {
  var i;
  var x = document.getElementsByClassName("mySlides");

  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }

  slideIndex++;

  if (slideIndex > x.length) {
    slideIndex = 1;
  }

  x[slideIndex - 1].style.display = "block";
  setTimeout(carousel, 150000); // Change image every 2 seconds
}

showSlides(slideIndex);

function showSlides(n) {
  var i;
  var slides = document.getElementsByClassName("mySlides");
  var dots = document.getElementsByClassName("dot");

  if (n > slides.length) {
    slideIndex = 1;
  }

  if (n < 1) {
    slideIndex = slides.length;
  }

  for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";
  }

  for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" active", "");
  }

  slides[slideIndex - 1].style.display = "block";
  dots[slideIndex - 1].className += " active";
}

Array.from(document.querySelectorAll('a.next')).forEach(function (cls) {
  cls.addEventListener('click', function () {
    showSlides(slideIndex += 1);
  });
});
Array.from(document.querySelectorAll('a.prev')).forEach(function (cls) {
  cls.addEventListener('click', function () {
    showSlides(slideIndex += -1);
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvY2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksVUFBVSxHQUFHLENBQWpCO0FBR0EsUUFBUTs7QUFFUixTQUFTLFFBQVQsR0FBb0I7QUFDakIsTUFBSSxDQUFKO0FBQ0MsTUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLHNCQUFULENBQWdDLFVBQWhDLENBQVI7O0FBQ0EsT0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBbEIsRUFBMEIsQ0FBQyxFQUEzQixFQUErQjtBQUMzQixJQUFBLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixNQUFyQjtBQUNIOztBQUNELEVBQUEsVUFBVTs7QUFDVixNQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsTUFBbkIsRUFBMkI7QUFBQyxJQUFBLFVBQVUsR0FBRyxDQUFiO0FBQWU7O0FBRTNDLEVBQUEsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFaLENBQUQsQ0FBZ0IsS0FBaEIsQ0FBc0IsT0FBdEIsR0FBZ0MsT0FBaEM7QUFDQSxFQUFBLFVBQVUsQ0FBQyxRQUFELEVBQVcsTUFBWCxDQUFWLENBVmdCLENBVWM7QUFDakM7O0FBQ0QsVUFBVSxDQUFDLFVBQUQsQ0FBVjs7QUFFQSxTQUFTLFVBQVQsQ0FBb0IsQ0FBcEIsRUFBdUI7QUFDbkIsTUFBSSxDQUFKO0FBQ0EsTUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLHNCQUFULENBQWdDLFVBQWhDLENBQWI7QUFDQSxNQUFJLElBQUksR0FBRyxRQUFRLENBQUMsc0JBQVQsQ0FBZ0MsS0FBaEMsQ0FBWDs7QUFDQSxNQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBZixFQUF1QjtBQUFDLElBQUEsVUFBVSxHQUFHLENBQWI7QUFBZTs7QUFDdkMsTUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXO0FBQUMsSUFBQSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQXBCO0FBQTJCOztBQUN2QyxPQUFLLENBQUMsR0FBRyxDQUFULEVBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUF2QixFQUErQixDQUFDLEVBQWhDLEVBQW9DO0FBQ2hDLElBQUEsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVLEtBQVYsQ0FBZ0IsT0FBaEIsR0FBMEIsTUFBMUI7QUFDSDs7QUFDRCxPQUFLLENBQUMsR0FBRyxDQUFULEVBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFyQixFQUE2QixDQUFDLEVBQTlCLEVBQWtDO0FBQzlCLElBQUEsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLFNBQVIsR0FBb0IsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLFNBQVIsQ0FBa0IsT0FBbEIsQ0FBMEIsU0FBMUIsRUFBcUMsRUFBckMsQ0FBcEI7QUFDSDs7QUFDRCxFQUFBLE1BQU0sQ0FBQyxVQUFVLEdBQUMsQ0FBWixDQUFOLENBQXFCLEtBQXJCLENBQTJCLE9BQTNCLEdBQXFDLE9BQXJDO0FBQ0EsRUFBQSxJQUFJLENBQUMsVUFBVSxHQUFDLENBQVosQ0FBSixDQUFtQixTQUFuQixJQUFnQyxTQUFoQztBQUNIOztBQUVELEtBQUssQ0FBQyxJQUFOLENBQVcsUUFBUSxDQUFDLGdCQUFULENBQTBCLFFBQTFCLENBQVgsRUFBZ0QsT0FBaEQsQ0FBd0QsVUFBQSxHQUFHLEVBQUk7QUFDM0QsRUFBQSxHQUFHLENBQUMsZ0JBQUosQ0FBcUIsT0FBckIsRUFBOEIsWUFBVztBQUNyQyxJQUFBLFVBQVUsQ0FBQyxVQUFVLElBQUksQ0FBZixDQUFWO0FBQ0gsR0FGRDtBQUdILENBSkQ7QUFNQSxLQUFLLENBQUMsSUFBTixDQUFXLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixRQUExQixDQUFYLEVBQWdELE9BQWhELENBQXdELFVBQUEsR0FBRyxFQUFJO0FBQzNELEVBQUEsR0FBRyxDQUFDLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFlBQVc7QUFDckMsSUFBQSxVQUFVLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBaEIsQ0FBVjtBQUNILEdBRkQ7QUFHSCxDQUpEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwidmFyIHNsaWRlSW5kZXggPSAwO1xyXG5cclxuXHJcbmNhcm91c2VsKCk7XHJcblxyXG5mdW5jdGlvbiBjYXJvdXNlbCgpIHtcclxuICAgdmFyIGk7XHJcbiAgICB2YXIgeCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJteVNsaWRlc1wiKTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgeFtpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbiAgICBzbGlkZUluZGV4Kys7XHJcbiAgICBpZiAoc2xpZGVJbmRleCA+IHgubGVuZ3RoKSB7c2xpZGVJbmRleCA9IDF9XHJcblxyXG4gICAgeFtzbGlkZUluZGV4LTFdLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICBzZXRUaW1lb3V0KGNhcm91c2VsLCAxNTAwMDApOyAvLyBDaGFuZ2UgaW1hZ2UgZXZlcnkgMiBzZWNvbmRzXHJcbn1cclxuc2hvd1NsaWRlcyhzbGlkZUluZGV4KTtcclxuXHJcbmZ1bmN0aW9uIHNob3dTbGlkZXMobikge1xyXG4gICAgdmFyIGk7XHJcbiAgICB2YXIgc2xpZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm15U2xpZGVzXCIpO1xyXG4gICAgdmFyIGRvdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZG90XCIpO1xyXG4gICAgaWYgKG4gPiBzbGlkZXMubGVuZ3RoKSB7c2xpZGVJbmRleCA9IDF9XHJcbiAgICBpZiAobiA8IDEpIHtzbGlkZUluZGV4ID0gc2xpZGVzLmxlbmd0aH1cclxuICAgIGZvciAoaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzbGlkZXNbaV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG4gICAgZm9yIChpID0gMDsgaSA8IGRvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBkb3RzW2ldLmNsYXNzTmFtZSA9IGRvdHNbaV0uY2xhc3NOYW1lLnJlcGxhY2UoXCIgYWN0aXZlXCIsIFwiXCIpO1xyXG4gICAgfVxyXG4gICAgc2xpZGVzW3NsaWRlSW5kZXgtMV0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIGRvdHNbc2xpZGVJbmRleC0xXS5jbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XHJcbn1cclxuXHJcbkFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYS5uZXh0JykpLmZvckVhY2goY2xzID0+IHtcclxuICAgIGNscy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNob3dTbGlkZXMoc2xpZGVJbmRleCArPSAxKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbkFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYS5wcmV2JykpLmZvckVhY2goY2xzID0+IHtcclxuICAgIGNscy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNob3dTbGlkZXMoc2xpZGVJbmRleCArPSAtMSk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5cclxuIl19
