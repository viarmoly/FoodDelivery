(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pagination = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var pagination = {
  list: [],
  pageList: [],
  paginationList: [],
  qtyPagList: [],
  currentPage: 1,
  numberPerPage: 3,
  numberOfPages: 1,
  getNumberOfPages: function getNumberOfPages() {
    return Math.ceil(pagination.list.length / pagination.numberPerPage);
  },
  makeContentList: function makeContentList() {
    var itemsQty = document.getElementById('container');
    var items = itemsQty.children;
    this.list = _toConsumableArray(items);
    return this.list;
  },
  loadContentList: function loadContentList() {
    var begin = (this.currentPage - 1) * this.numberPerPage;
    var end = begin + this.numberPerPage;
    this.pageList = this.list.slice(begin, end);
    pagination.drawList();
  },
  drawList: function drawList() {
    document.getElementById('container').innerHTML = '';
    var container = document.getElementById('container');
    this.pageList.forEach(function (item) {
      container.appendChild(item);
    });
  },
  makePaginationList: function makePaginationList() {
    var pageConatiner = document.createElement('span');

    for (var i = 1; i <= this.numberOfPages; i++) {
      var pageNumber = document.createElement('a');

      if (i === 1) {
        pageNumber.classList.add('current');
      }

      pageNumber.textContent = "".concat(i);
      pageNumber.addEventListener('click', currentPageNumber);
      pageConatiner.appendChild(pageNumber);
    }

    this.paginationList = _toConsumableArray(pageConatiner.children);
    return this.paginationList;
  },
  paginationCut: function paginationCut() {
    if (this.currentPage <= 6) {
      this.qtyPagList = this.paginationList.slice(0, 10);
    } else if (this.currentPage > 6 && this.currentPage < this.paginationList.length - 4) {
      this.qtyPagList = this.paginationList.slice(this.currentPage - 6, this.currentPage + 4);
    } else if (this.currentPage >= this.paginationList.length - 4) {
      this.qtyPagList = this.paginationList.slice(-10);
    }

    pagination.drawPagination();
  },
  drawPagination: function drawPagination() {
    var pagination = document.getElementById('pagination');
    document.getElementById('pagination').innerHTML = '';
    var first = document.createElement('a');
    var firstIcon = document.createElement('i');
    firstIcon.className = 'fas fa-1x fa-angle-double-left';
    first.appendChild(firstIcon);
    first.addEventListener('click', firstPage);
    pagination.appendChild(first);
    var prev = document.createElement('a');
    var prevIcon = document.createElement('i');
    prevIcon.className = 'fas fa-1x fa-angle-left';
    prev.appendChild(prevIcon);
    prev.addEventListener('click', previousPage);
    pagination.appendChild(prev);
    var pageConatiner = document.createElement('span');
    this.qtyPagList.forEach(function (item) {
      pageConatiner.appendChild(item);
    });
    pagination.appendChild(pageConatiner);
    var next = document.createElement('a');
    var nextIcon = document.createElement('i');
    nextIcon.className = 'fas fa-1x fa-angle-right';
    next.appendChild(nextIcon);
    next.addEventListener('click', nextPage);
    pagination.appendChild(next);
    var last = document.createElement('a');
    var lastIcon = document.createElement('i');
    lastIcon.className = 'fas fa-1x fa-angle-double-right';
    last.appendChild(lastIcon);
    last.addEventListener('click', lastPage);
    pagination.appendChild(last);
  },
  toggleClass: function toggleClass() {
    this.paginationList.forEach(function (item) {
      return item.classList.remove('current');
    });
    this.qtyPagList.forEach(function (item) {
      return item.classList.remove('current');
    });

    if (this.currentPage) {
      this.paginationList[this.currentPage - 1].className = "current";
    }
  },
  loadEvents: function loadEvents() {
    pagination.paginationCut();
    pagination.toggleClass();
    pagination.loadContentList();
  },
  load: function load() {
    pagination.makeContentList();
    this.numberOfPages = pagination.getNumberOfPages();
    pagination.makePaginationList();
    pagination.paginationCut();
    pagination.loadContentList();
    pagination.drawList();
  }
};
exports.pagination = pagination;

function currentPageNumber(ev) {
  ev.preventDefault();
  var position = parseInt(ev.target.text);

  if (position !== pagination.currentPage) {
    pagination.currentPage = position;
    pagination.loadEvents();
  }
}

function nextPage(ev) {
  if (pagination.currentPage !== pagination.numberOfPages) {
    pagination.currentPage += 1;
    pagination.loadEvents();
  } else {
    ev.preventDefault();
  }
}

function previousPage(ev) {
  ev.preventDefault();

  if (pagination.currentPage !== 1) {
    pagination.currentPage -= 1;
    pagination.loadEvents();
  } else {
    ev.preventDefault();
  }
}

function firstPage(ev) {
  ev.preventDefault();

  if (pagination.currentPage !== 1) {
    pagination.currentPage = 1;
    pagination.loadEvents();
  }
}

function lastPage(ev) {
  ev.preventDefault();

  if (pagination.currentPage !== pagination.numberOfPages) {
    pagination.currentPage = pagination.numberOfPages;
    pagination.loadEvents();
  }
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvcGFnaW5hdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQ0FPLElBQU0sVUFBVSxHQUFHO0FBQ3RCLEVBQUEsSUFBSSxFQUFFLEVBRGdCO0FBRXRCLEVBQUEsUUFBUSxFQUFFLEVBRlk7QUFHdEIsRUFBQSxjQUFjLEVBQUUsRUFITTtBQUl0QixFQUFBLFVBQVUsRUFBRSxFQUpVO0FBS3RCLEVBQUEsV0FBVyxFQUFFLENBTFM7QUFNdEIsRUFBQSxhQUFhLEVBQUUsQ0FOTztBQU90QixFQUFBLGFBQWEsRUFBRSxDQVBPO0FBU3RCLEVBQUEsZ0JBVHNCLDhCQVNIO0FBQ2YsV0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLFVBQVUsQ0FBQyxJQUFYLENBQWdCLE1BQWhCLEdBQXlCLFVBQVUsQ0FBQyxhQUE5QyxDQUFQO0FBQ0gsR0FYcUI7QUFZdEIsRUFBQSxlQVpzQiw2QkFZSjtBQUNkLFFBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLFdBQXhCLENBQWY7QUFDQSxRQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBckI7QUFDQSxTQUFLLElBQUwsc0JBQWdCLEtBQWhCO0FBQ0EsV0FBTyxLQUFLLElBQVo7QUFDSCxHQWpCcUI7QUFtQnRCLEVBQUEsZUFuQnNCLDZCQW1CSjtBQUNkLFFBQUksS0FBSyxHQUFJLENBQUMsS0FBSyxXQUFMLEdBQW1CLENBQXBCLElBQXlCLEtBQUssYUFBM0M7QUFDQSxRQUFJLEdBQUcsR0FBRyxLQUFLLEdBQUcsS0FBSyxhQUF2QjtBQUNBLFNBQUssUUFBTCxHQUFnQixLQUFLLElBQUwsQ0FBVSxLQUFWLENBQWdCLEtBQWhCLEVBQXVCLEdBQXZCLENBQWhCO0FBQ0EsSUFBQSxVQUFVLENBQUMsUUFBWDtBQUNILEdBeEJxQjtBQXlCdEIsRUFBQSxRQXpCc0Isc0JBeUJYO0FBQ1AsSUFBQSxRQUFRLENBQUMsY0FBVCxDQUF3QixXQUF4QixFQUFxQyxTQUFyQyxHQUFpRCxFQUFqRDtBQUNBLFFBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLFdBQXhCLENBQWhCO0FBQ0EsU0FBSyxRQUFMLENBQWMsT0FBZCxDQUFzQixVQUFDLElBQUQsRUFBVTtBQUM1QixNQUFBLFNBQVMsQ0FBQyxXQUFWLENBQXNCLElBQXRCO0FBQ0gsS0FGRDtBQUdILEdBL0JxQjtBQWdDdEIsRUFBQSxrQkFoQ3NCLGdDQWdDRDtBQUNqQixRQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixNQUF2QixDQUFwQjs7QUFDQSxTQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxJQUFJLEtBQUssYUFBMUIsRUFBeUMsQ0FBQyxFQUExQyxFQUE4QztBQUMxQyxVQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QixDQUFqQjs7QUFDQSxVQUFJLENBQUMsS0FBSyxDQUFWLEVBQWE7QUFDVCxRQUFBLFVBQVUsQ0FBQyxTQUFYLENBQXFCLEdBQXJCLENBQXlCLFNBQXpCO0FBQ0g7O0FBQ0QsTUFBQSxVQUFVLENBQUMsV0FBWCxhQUE0QixDQUE1QjtBQUNBLE1BQUEsVUFBVSxDQUFDLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLGlCQUFyQztBQUNBLE1BQUEsYUFBYSxDQUFDLFdBQWQsQ0FBMEIsVUFBMUI7QUFDSDs7QUFDRCxTQUFLLGNBQUwsc0JBQTBCLGFBQWEsQ0FBQyxRQUF4QztBQUNBLFdBQU8sS0FBSyxjQUFaO0FBQ0gsR0E3Q3FCO0FBOEN0QixFQUFBLGFBOUNzQiwyQkE4Q047QUFDWixRQUFJLEtBQUssV0FBTCxJQUFvQixDQUF4QixFQUEyQjtBQUN2QixXQUFLLFVBQUwsR0FBa0IsS0FBSyxjQUFMLENBQW9CLEtBQXBCLENBQTBCLENBQTFCLEVBQTZCLEVBQTdCLENBQWxCO0FBQ0gsS0FGRCxNQUVPLElBQUksS0FBSyxXQUFMLEdBQW1CLENBQW5CLElBQXdCLEtBQUssV0FBTCxHQUFtQixLQUFLLGNBQUwsQ0FBb0IsTUFBcEIsR0FBNkIsQ0FBNUUsRUFBK0U7QUFDbEYsV0FBSyxVQUFMLEdBQWtCLEtBQUssY0FBTCxDQUFvQixLQUFwQixDQUEwQixLQUFLLFdBQUwsR0FBbUIsQ0FBN0MsRUFBZ0QsS0FBSyxXQUFMLEdBQW1CLENBQW5FLENBQWxCO0FBQ0gsS0FGTSxNQUVBLElBQUksS0FBSyxXQUFMLElBQW9CLEtBQUssY0FBTCxDQUFvQixNQUFwQixHQUE2QixDQUFyRCxFQUF3RDtBQUMzRCxXQUFLLFVBQUwsR0FBa0IsS0FBSyxjQUFMLENBQW9CLEtBQXBCLENBQTBCLENBQUMsRUFBM0IsQ0FBbEI7QUFDSDs7QUFDRCxJQUFBLFVBQVUsQ0FBQyxjQUFYO0FBQ0gsR0F2RHFCO0FBd0R0QixFQUFBLGNBeERzQiw0QkF3REw7QUFDYixRQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsY0FBVCxDQUF3QixZQUF4QixDQUFqQjtBQUNBLElBQUEsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsWUFBeEIsRUFBc0MsU0FBdEMsR0FBa0QsRUFBbEQ7QUFFQSxRQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QixDQUFaO0FBQ0EsUUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBaEI7QUFDQSxJQUFBLFNBQVMsQ0FBQyxTQUFWLEdBQXFCLGdDQUFyQjtBQUNBLElBQUEsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsU0FBbEI7QUFDQSxJQUFBLEtBQUssQ0FBQyxnQkFBTixDQUF1QixPQUF2QixFQUFnQyxTQUFoQztBQUNBLElBQUEsVUFBVSxDQUFDLFdBQVgsQ0FBdUIsS0FBdkI7QUFFQSxRQUFJLElBQUksR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QixDQUFYO0FBQ0EsUUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZjtBQUNBLElBQUEsUUFBUSxDQUFDLFNBQVQsR0FBb0IseUJBQXBCO0FBQ0EsSUFBQSxJQUFJLENBQUMsV0FBTCxDQUFpQixRQUFqQjtBQUNBLElBQUEsSUFBSSxDQUFDLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFlBQS9CO0FBQ0EsSUFBQSxVQUFVLENBQUMsV0FBWCxDQUF1QixJQUF2QjtBQUVBLFFBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLE1BQXZCLENBQXBCO0FBRUEsU0FBSyxVQUFMLENBQWdCLE9BQWhCLENBQXdCLFVBQUEsSUFBSSxFQUFJO0FBQzVCLE1BQUEsYUFBYSxDQUFDLFdBQWQsQ0FBMEIsSUFBMUI7QUFDSCxLQUZEO0FBSUEsSUFBQSxVQUFVLENBQUMsV0FBWCxDQUF1QixhQUF2QjtBQUVBLFFBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLEdBQXZCLENBQVg7QUFDQSxRQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QixDQUFmO0FBQ0EsSUFBQSxRQUFRLENBQUMsU0FBVCxHQUFvQiwwQkFBcEI7QUFDQSxJQUFBLElBQUksQ0FBQyxXQUFMLENBQWlCLFFBQWpCO0FBQ0EsSUFBQSxJQUFJLENBQUMsZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0IsUUFBL0I7QUFDQSxJQUFBLFVBQVUsQ0FBQyxXQUFYLENBQXVCLElBQXZCO0FBRUEsUUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBWDtBQUNBLFFBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLEdBQXZCLENBQWY7QUFDQSxJQUFBLFFBQVEsQ0FBQyxTQUFULEdBQW9CLGlDQUFwQjtBQUNBLElBQUEsSUFBSSxDQUFDLFdBQUwsQ0FBaUIsUUFBakI7QUFDQSxJQUFBLElBQUksQ0FBQyxnQkFBTCxDQUFzQixPQUF0QixFQUErQixRQUEvQjtBQUNBLElBQUEsVUFBVSxDQUFDLFdBQVgsQ0FBdUIsSUFBdkI7QUFDSCxHQS9GcUI7QUFnR3RCLEVBQUEsV0FoR3NCLHlCQWdHUjtBQUNWLFNBQUssY0FBTCxDQUFvQixPQUFwQixDQUE0QixVQUFBLElBQUk7QUFBQSxhQUFJLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUFzQixTQUF0QixDQUFKO0FBQUEsS0FBaEM7QUFDQSxTQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsQ0FBd0IsVUFBQSxJQUFJO0FBQUEsYUFBSSxJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsQ0FBc0IsU0FBdEIsQ0FBSjtBQUFBLEtBQTVCOztBQUNBLFFBQUksS0FBSyxXQUFULEVBQXNCO0FBQ2xCLFdBQUssY0FBTCxDQUFvQixLQUFLLFdBQUwsR0FBbUIsQ0FBdkMsRUFBMEMsU0FBMUMsR0FBc0QsU0FBdEQ7QUFDSDtBQUNKLEdBdEdxQjtBQXdHdEIsRUFBQSxVQXhHc0Isd0JBd0dUO0FBQ1QsSUFBQSxVQUFVLENBQUMsYUFBWDtBQUNBLElBQUEsVUFBVSxDQUFDLFdBQVg7QUFDQSxJQUFBLFVBQVUsQ0FBQyxlQUFYO0FBQ0gsR0E1R3FCO0FBNkd0QixFQUFBLElBN0dzQixrQkE2R2Y7QUFDSCxJQUFBLFVBQVUsQ0FBQyxlQUFYO0FBQ0EsU0FBSyxhQUFMLEdBQXFCLFVBQVUsQ0FBQyxnQkFBWCxFQUFyQjtBQUNBLElBQUEsVUFBVSxDQUFDLGtCQUFYO0FBQ0EsSUFBQSxVQUFVLENBQUMsYUFBWDtBQUNBLElBQUEsVUFBVSxDQUFDLGVBQVg7QUFDQSxJQUFBLFVBQVUsQ0FBQyxRQUFYO0FBQ0g7QUFwSHFCLENBQW5COzs7QUF5SFAsU0FBUyxpQkFBVCxDQUEyQixFQUEzQixFQUErQjtBQUMzQixFQUFBLEVBQUUsQ0FBQyxjQUFIO0FBQ0EsTUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBWCxDQUF2Qjs7QUFDQSxNQUFJLFFBQVEsS0FBSyxVQUFVLENBQUMsV0FBNUIsRUFBeUM7QUFDckMsSUFBQSxVQUFVLENBQUMsV0FBWCxHQUF5QixRQUF6QjtBQUNBLElBQUEsVUFBVSxDQUFDLFVBQVg7QUFDSDtBQUNKOztBQUVELFNBQVMsUUFBVCxDQUFrQixFQUFsQixFQUFzQjtBQUNsQixNQUFJLFVBQVUsQ0FBQyxXQUFYLEtBQTJCLFVBQVUsQ0FBQyxhQUExQyxFQUF5RDtBQUNyRCxJQUFBLFVBQVUsQ0FBQyxXQUFYLElBQTBCLENBQTFCO0FBQ0EsSUFBQSxVQUFVLENBQUMsVUFBWDtBQUNILEdBSEQsTUFHTztBQUNILElBQUEsRUFBRSxDQUFDLGNBQUg7QUFDSDtBQUNKOztBQUVELFNBQVMsWUFBVCxDQUFzQixFQUF0QixFQUEwQjtBQUN0QixFQUFBLEVBQUUsQ0FBQyxjQUFIOztBQUNBLE1BQUksVUFBVSxDQUFDLFdBQVgsS0FBMkIsQ0FBL0IsRUFBa0M7QUFDOUIsSUFBQSxVQUFVLENBQUMsV0FBWCxJQUEwQixDQUExQjtBQUNBLElBQUEsVUFBVSxDQUFDLFVBQVg7QUFDSCxHQUhELE1BR087QUFDSCxJQUFBLEVBQUUsQ0FBQyxjQUFIO0FBQ0g7QUFDSjs7QUFFRCxTQUFTLFNBQVQsQ0FBbUIsRUFBbkIsRUFBdUI7QUFDbkIsRUFBQSxFQUFFLENBQUMsY0FBSDs7QUFDQSxNQUFJLFVBQVUsQ0FBQyxXQUFYLEtBQTJCLENBQS9CLEVBQWtDO0FBQzlCLElBQUEsVUFBVSxDQUFDLFdBQVgsR0FBeUIsQ0FBekI7QUFDQSxJQUFBLFVBQVUsQ0FBQyxVQUFYO0FBQ0g7QUFDSjs7QUFFRCxTQUFTLFFBQVQsQ0FBa0IsRUFBbEIsRUFBc0I7QUFDbEIsRUFBQSxFQUFFLENBQUMsY0FBSDs7QUFDQSxNQUFJLFVBQVUsQ0FBQyxXQUFYLEtBQTJCLFVBQVUsQ0FBQyxhQUExQyxFQUF5RDtBQUNyRCxJQUFBLFVBQVUsQ0FBQyxXQUFYLEdBQXlCLFVBQVUsQ0FBQyxhQUFwQztBQUNBLElBQUEsVUFBVSxDQUFDLFVBQVg7QUFDSDtBQUNKIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0IGNvbnN0IHBhZ2luYXRpb24gPSB7XHJcbiAgICBsaXN0OiBbXSxcclxuICAgIHBhZ2VMaXN0OiBbXSxcclxuICAgIHBhZ2luYXRpb25MaXN0OiBbXSxcclxuICAgIHF0eVBhZ0xpc3Q6IFtdLFxyXG4gICAgY3VycmVudFBhZ2U6IDEsXHJcbiAgICBudW1iZXJQZXJQYWdlOiAzLFxyXG4gICAgbnVtYmVyT2ZQYWdlczogMSxcclxuXHJcbiAgICBnZXROdW1iZXJPZlBhZ2VzKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwocGFnaW5hdGlvbi5saXN0Lmxlbmd0aCAvIHBhZ2luYXRpb24ubnVtYmVyUGVyUGFnZSk7XHJcbiAgICB9LFxyXG4gICAgbWFrZUNvbnRlbnRMaXN0KCkge1xyXG4gICAgICAgIGxldCBpdGVtc1F0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKTtcclxuICAgICAgICBsZXQgaXRlbXMgPSBpdGVtc1F0eS5jaGlsZHJlbjtcclxuICAgICAgICB0aGlzLmxpc3QgPSBbLi4uaXRlbXNdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIGxvYWRDb250ZW50TGlzdCgpIHtcclxuICAgICAgICBsZXQgYmVnaW4gPSAoKHRoaXMuY3VycmVudFBhZ2UgLSAxKSAqIHRoaXMubnVtYmVyUGVyUGFnZSk7XHJcbiAgICAgICAgbGV0IGVuZCA9IGJlZ2luICsgdGhpcy5udW1iZXJQZXJQYWdlO1xyXG4gICAgICAgIHRoaXMucGFnZUxpc3QgPSB0aGlzLmxpc3Quc2xpY2UoYmVnaW4sIGVuZCk7XHJcbiAgICAgICAgcGFnaW5hdGlvbi5kcmF3TGlzdCgpO1xyXG4gICAgfSxcclxuICAgIGRyYXdMaXN0KCkge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpO1xyXG4gICAgICAgIHRoaXMucGFnZUxpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgbWFrZVBhZ2luYXRpb25MaXN0KCkge1xyXG4gICAgICAgIGxldCBwYWdlQ29uYXRpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMubnVtYmVyT2ZQYWdlczsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwYWdlTnVtYmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcGFnZU51bWJlci5jbGFzc0xpc3QuYWRkKCdjdXJyZW50JylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYWdlTnVtYmVyLnRleHRDb250ZW50ID0gYCR7aX1gO1xyXG4gICAgICAgICAgICBwYWdlTnVtYmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY3VycmVudFBhZ2VOdW1iZXIpO1xyXG4gICAgICAgICAgICBwYWdlQ29uYXRpbmVyLmFwcGVuZENoaWxkKHBhZ2VOdW1iZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2luYXRpb25MaXN0ID0gWy4uLnBhZ2VDb25hdGluZXIuY2hpbGRyZW5dO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2luYXRpb25MaXN0O1xyXG4gICAgfSxcclxuICAgIHBhZ2luYXRpb25DdXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPD0gNikge1xyXG4gICAgICAgICAgICB0aGlzLnF0eVBhZ0xpc3QgPSB0aGlzLnBhZ2luYXRpb25MaXN0LnNsaWNlKDAsIDEwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFBhZ2UgPiA2ICYmIHRoaXMuY3VycmVudFBhZ2UgPCB0aGlzLnBhZ2luYXRpb25MaXN0Lmxlbmd0aCAtIDQpIHtcclxuICAgICAgICAgICAgdGhpcy5xdHlQYWdMaXN0ID0gdGhpcy5wYWdpbmF0aW9uTGlzdC5zbGljZSh0aGlzLmN1cnJlbnRQYWdlIC0gNiwgdGhpcy5jdXJyZW50UGFnZSArIDQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50UGFnZSA+PSB0aGlzLnBhZ2luYXRpb25MaXN0Lmxlbmd0aCAtIDQpIHtcclxuICAgICAgICAgICAgdGhpcy5xdHlQYWdMaXN0ID0gdGhpcy5wYWdpbmF0aW9uTGlzdC5zbGljZSgtMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYWdpbmF0aW9uLmRyYXdQYWdpbmF0aW9uKCk7XHJcbiAgICB9LFxyXG4gICAgZHJhd1BhZ2luYXRpb24oKSB7XHJcbiAgICAgICAgbGV0IHBhZ2luYXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnaW5hdGlvbicpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdpbmF0aW9uJykuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgIGxldCBmaXJzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsZXQgZmlyc3RJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gICAgICAgIGZpcnN0SWNvbi5jbGFzc05hbWUgPSdmYXMgZmEtMXggZmEtYW5nbGUtZG91YmxlLWxlZnQnO1xyXG4gICAgICAgIGZpcnN0LmFwcGVuZENoaWxkKGZpcnN0SWNvbik7XHJcbiAgICAgICAgZmlyc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaXJzdFBhZ2UpO1xyXG4gICAgICAgIHBhZ2luYXRpb24uYXBwZW5kQ2hpbGQoZmlyc3QpO1xyXG5cclxuICAgICAgICBsZXQgcHJldiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsZXQgcHJldkljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgICAgcHJldkljb24uY2xhc3NOYW1lID0nZmFzIGZhLTF4IGZhLWFuZ2xlLWxlZnQnO1xyXG4gICAgICAgIHByZXYuYXBwZW5kQ2hpbGQocHJldkljb24pO1xyXG4gICAgICAgIHByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcmV2aW91c1BhZ2UpO1xyXG4gICAgICAgIHBhZ2luYXRpb24uYXBwZW5kQ2hpbGQocHJldik7XHJcblxyXG4gICAgICAgIGxldCBwYWdlQ29uYXRpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cclxuICAgICAgICB0aGlzLnF0eVBhZ0xpc3QuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgcGFnZUNvbmF0aW5lci5hcHBlbmRDaGlsZChpdGVtKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFnaW5hdGlvbi5hcHBlbmRDaGlsZChwYWdlQ29uYXRpbmVyKTtcclxuXHJcbiAgICAgICAgbGV0IG5leHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgbGV0IG5leHRJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gICAgICAgIG5leHRJY29uLmNsYXNzTmFtZSA9J2ZhcyBmYS0xeCBmYS1hbmdsZS1yaWdodCc7XHJcbiAgICAgICAgbmV4dC5hcHBlbmRDaGlsZChuZXh0SWNvbik7XHJcbiAgICAgICAgbmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5leHRQYWdlKTtcclxuICAgICAgICBwYWdpbmF0aW9uLmFwcGVuZENoaWxkKG5leHQpO1xyXG5cclxuICAgICAgICBsZXQgbGFzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsZXQgbGFzdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgICAgbGFzdEljb24uY2xhc3NOYW1lID0nZmFzIGZhLTF4IGZhLWFuZ2xlLWRvdWJsZS1yaWdodCc7XHJcbiAgICAgICAgbGFzdC5hcHBlbmRDaGlsZChsYXN0SWNvbik7XHJcbiAgICAgICAgbGFzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxhc3RQYWdlKTtcclxuICAgICAgICBwYWdpbmF0aW9uLmFwcGVuZENoaWxkKGxhc3QpO1xyXG4gICAgfSxcclxuICAgIHRvZ2dsZUNsYXNzKCkge1xyXG4gICAgICAgIHRoaXMucGFnaW5hdGlvbkxpc3QuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnY3VycmVudCcpKTtcclxuICAgICAgICB0aGlzLnF0eVBhZ0xpc3QuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnY3VycmVudCcpKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25MaXN0W3RoaXMuY3VycmVudFBhZ2UgLSAxXS5jbGFzc05hbWUgPSBcImN1cnJlbnRcIjtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGxvYWRFdmVudHMoKSB7XHJcbiAgICAgICAgcGFnaW5hdGlvbi5wYWdpbmF0aW9uQ3V0KCk7XHJcbiAgICAgICAgcGFnaW5hdGlvbi50b2dnbGVDbGFzcygpO1xyXG4gICAgICAgIHBhZ2luYXRpb24ubG9hZENvbnRlbnRMaXN0KCk7XHJcbiAgICB9LFxyXG4gICAgbG9hZCgpIHtcclxuICAgICAgICBwYWdpbmF0aW9uLm1ha2VDb250ZW50TGlzdCgpO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZQYWdlcyA9IHBhZ2luYXRpb24uZ2V0TnVtYmVyT2ZQYWdlcygpO1xyXG4gICAgICAgIHBhZ2luYXRpb24ubWFrZVBhZ2luYXRpb25MaXN0KCk7XHJcbiAgICAgICAgcGFnaW5hdGlvbi5wYWdpbmF0aW9uQ3V0KCk7XHJcbiAgICAgICAgcGFnaW5hdGlvbi5sb2FkQ29udGVudExpc3QoKTtcclxuICAgICAgICBwYWdpbmF0aW9uLmRyYXdMaXN0KCk7XHJcbiAgICB9XHJcblxyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIGN1cnJlbnRQYWdlTnVtYmVyKGV2KSB7XHJcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgbGV0IHBvc2l0aW9uID0gcGFyc2VJbnQoZXYudGFyZ2V0LnRleHQpO1xyXG4gICAgaWYgKHBvc2l0aW9uICE9PSBwYWdpbmF0aW9uLmN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgcGFnaW5hdGlvbi5jdXJyZW50UGFnZSA9IHBvc2l0aW9uO1xyXG4gICAgICAgIHBhZ2luYXRpb24ubG9hZEV2ZW50cygpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBuZXh0UGFnZShldikge1xyXG4gICAgaWYgKHBhZ2luYXRpb24uY3VycmVudFBhZ2UgIT09IHBhZ2luYXRpb24ubnVtYmVyT2ZQYWdlcykge1xyXG4gICAgICAgIHBhZ2luYXRpb24uY3VycmVudFBhZ2UgKz0gMTtcclxuICAgICAgICBwYWdpbmF0aW9uLmxvYWRFdmVudHMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcmV2aW91c1BhZ2UoZXYpIHtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAocGFnaW5hdGlvbi5jdXJyZW50UGFnZSAhPT0gMSkge1xyXG4gICAgICAgIHBhZ2luYXRpb24uY3VycmVudFBhZ2UgLT0gMTtcclxuICAgICAgICBwYWdpbmF0aW9uLmxvYWRFdmVudHMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmlyc3RQYWdlKGV2KSB7XHJcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKHBhZ2luYXRpb24uY3VycmVudFBhZ2UgIT09IDEpIHtcclxuICAgICAgICBwYWdpbmF0aW9uLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICBwYWdpbmF0aW9uLmxvYWRFdmVudHMoKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGFzdFBhZ2UoZXYpIHtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAocGFnaW5hdGlvbi5jdXJyZW50UGFnZSAhPT0gcGFnaW5hdGlvbi5udW1iZXJPZlBhZ2VzKSB7XHJcbiAgICAgICAgcGFnaW5hdGlvbi5jdXJyZW50UGFnZSA9IHBhZ2luYXRpb24ubnVtYmVyT2ZQYWdlcztcclxuICAgICAgICBwYWdpbmF0aW9uLmxvYWRFdmVudHMoKTtcclxuICAgIH1cclxufVxyXG4iXX0=
