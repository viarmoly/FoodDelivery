(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pagination = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var pagination = {
  list: [],
  pageList: [],
  paginationList: [],
  qtyPagList: [],
  currentPage: 1,
  numberPerPage: 3,
  numberOfPages: 1,
  getScreenWidth: function getScreenWidth() {
    if (window.innerWidth <= 1080) {
      console.log(window.innerWidth);
      this.numberPerPage = 4;
    }
  },
  getNumberOfPages: function getNumberOfPages() {
    return Math.ceil(pagination.list.length / pagination.numberPerPage);
  },
  paginationCheck: function paginationCheck() {
    if (this.numberOfPages <= 1) {
      console.log('what?' + this.numberOfPages);
      pagination.remove();
    }
  },
  makeContentList: function makeContentList() {
    var itemsQty = document.getElementById('container');
    var items = itemsQty.children;
    this.list = _toConsumableArray(items);
    return this.list;
  },
  loadContentList: function loadContentList() {
    var begin = (this.currentPage - 1) * this.numberPerPage;
    var end = begin + this.numberPerPage;
    this.pageList = this.list.slice(begin, end);
    pagination.drawList();
  },
  drawList: function drawList() {
    document.getElementById('container').innerHTML = '';
    var container = document.getElementById('container');
    this.pageList.forEach(function (item) {
      container.appendChild(item);
    });
  },
  makePaginationList: function makePaginationList() {
    var pageConatiner = document.createElement('span');

    for (var i = 1; i <= this.numberOfPages; i++) {
      var pageNumber = document.createElement('a');

      if (i === 1) {
        pageNumber.classList.add('current');
      }

      pageNumber.textContent = "".concat(i);
      pageNumber.addEventListener('click', currentPageNumber);
      pageConatiner.appendChild(pageNumber);
    }

    this.paginationList = _toConsumableArray(pageConatiner.children);
    return this.paginationList;
  },
  paginationCut: function paginationCut() {
    if (this.currentPage <= 6) {
      this.qtyPagList = this.paginationList.slice(0, 10);
    } else if (this.currentPage > 6 && this.currentPage < this.paginationList.length - 4) {
      this.qtyPagList = this.paginationList.slice(this.currentPage - 6, this.currentPage + 4);
    } else if (this.currentPage >= this.paginationList.length - 4) {
      this.qtyPagList = this.paginationList.slice(-10);
    }

    pagination.drawPagination();
  },
  drawPagination: function drawPagination() {
    var pagination = document.getElementById('pagination');
    document.getElementById('pagination').innerHTML = '';
    var first = document.createElement('a');
    var firstIcon = document.createElement('i');
    firstIcon.className = 'fas fa-1x fa-angle-double-left';
    first.appendChild(firstIcon);
    first.addEventListener('click', firstPage);
    pagination.appendChild(first);
    var prev = document.createElement('a');
    var prevIcon = document.createElement('i');
    prevIcon.className = 'fas fa-1x fa-angle-left';
    prev.appendChild(prevIcon);
    prev.addEventListener('click', previousPage);
    pagination.appendChild(prev);
    var pageConatiner = document.createElement('span');
    this.qtyPagList.forEach(function (item) {
      pageConatiner.appendChild(item);
    });
    pagination.appendChild(pageConatiner);
    var next = document.createElement('a');
    var nextIcon = document.createElement('i');
    nextIcon.className = 'fas fa-1x fa-angle-right';
    next.appendChild(nextIcon);
    next.addEventListener('click', nextPage);
    pagination.appendChild(next);
    var last = document.createElement('a');
    var lastIcon = document.createElement('i');
    lastIcon.className = 'fas fa-1x fa-angle-double-right';
    last.appendChild(lastIcon);
    last.addEventListener('click', lastPage);
    pagination.appendChild(last);
  },
  toggleClass: function toggleClass() {
    this.paginationList.forEach(function (item) {
      return item.classList.remove('current');
    });
    this.qtyPagList.forEach(function (item) {
      return item.classList.remove('current');
    });

    if (this.currentPage) {
      this.paginationList[this.currentPage - 1].className = "current";
    }
  },
  remove: function remove() {
    var pagination = document.getElementById('pagination');
    document.getElementById('pagination').innerHTML = '';
  },
  loadEvents: function loadEvents() {
    pagination.paginationCut();
    pagination.toggleClass();
    pagination.loadContentList();
  },
  load: function load() {
    pagination.getScreenWidth();
    pagination.makeContentList();
    this.currentPage = 1;
    this.numberOfPages = pagination.getNumberOfPages();
    pagination.makePaginationList();
    pagination.paginationCut();
    pagination.loadContentList();
    pagination.drawList();
    pagination.paginationCheck();
  }
};
exports.pagination = pagination;

function currentPageNumber(ev) {
  ev.preventDefault();
  var position = parseInt(ev.target.text);

  if (position !== pagination.currentPage) {
    pagination.currentPage = position;
    pagination.loadEvents();
    window.scrollTo(0, 0);
  }
}

function nextPage(ev) {
  if (pagination.currentPage !== pagination.numberOfPages) {
    pagination.currentPage += 1;
    pagination.loadEvents();
    window.scrollTo(0, 0);
  } else {
    ev.preventDefault();
  }
}

function previousPage(ev) {
  ev.preventDefault();

  if (pagination.currentPage !== 1) {
    pagination.currentPage -= 1;
    pagination.loadEvents();
    window.scrollTo(0, 0);
  } else {
    ev.preventDefault();
  }
}

function firstPage(ev) {
  ev.preventDefault();

  if (pagination.currentPage !== 1) {
    pagination.currentPage = 1;
    pagination.loadEvents();
    window.scrollTo(0, 0);
  }
}

function lastPage(ev) {
  ev.preventDefault();

  if (pagination.currentPage !== pagination.numberOfPages) {
    pagination.currentPage = pagination.numberOfPages;
    pagination.loadEvents();
    window.scrollTo(0, 0);
  }
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
